{"version":3,"sources":["App.js","images/circle.js","reportWebVitals.js","index.js"],"names":["mapboxgl","workerClass","require","default","image","Image","src","btoa","style","fill","images","sdf","Map","ReactMapboxGl","accessToken","process","trainColors","lineColors","useBlackText","App","useRef","useState","trail","setActiveTrail","station","setActiveStation","useMediaQuery","isDesktop","position","setPosition","bounds","stops","metroNorth","forEach","line","console","log","name","stop","push","njtransit","useDisclosure","defaultIsOpen","infoOpen","isOpen","onInfoOpen","onOpen","onInfoClose","onClose","detailsOpen","detailsOnOpen","detailsClose","btnRef","popupClick","data","map","stationClicked","toggleHover","cursor","getCanvas","setFeatureState","source","id","hover","useEffect","containerStyle","height","width","center","onClick","event","lngLat","lng","lat","onZoomEnd","fitboundUpdate","fitBounds","onStyleLoad","_","route","linePaint","metroNorthLines","features","index","properties","ref","toString","njTransitLines","sharedLines","type","layout","coordinates","lon","bind","trails","park","distance","length","url","onMouseEnter","onMouseLeave","direction","in","zIndex","color","mt","bg","Object","entries","rounded","shadow","maxW","size","icon","Close","colorScheme","pb","px","textColor","includes","isExternal","href","ExternalLink","mx","roundedTop","QuestionOutline","isRound","top","right","placement","autoFocus","backgroundColor","justify","action","method","target","value","border","title","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8096db01.chunk.js","sourcesContent":["import {\n  ChakraProvider,\n  Container,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerCloseButton,\n  DrawerBody,\n  Button,\n  Input,\n  DrawerFooter,\n  useDisclosure,\n  IconButton,\n  Text,\n  Flex,\n  Spacer,\n  Heading,\n  Box,\n  Slide,\n  CloseButton,\n  useMediaQuery,\n  Link\n} from '@chakra-ui/react'\nimport { QuestionOutlineIcon, CloseIcon, ExternalLinkIcon } from '@chakra-ui/icons';\nimport { useRef, useState, useEffect } from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer, Source } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport trails from './data/all_trails.json'\nimport metroNorth from './data/metro_north.json'\nimport metroNorthLines from './data/lines/mn lines.json'\nimport njtransit from './data/njtransit.json'\nimport njTransitLines from './data/lines/nj lines.json'\nimport sharedLines from './data/lines/shared lines.json'\nimport { svg } from './images/circle'\nimport route from './data/tracks/Tuxedo Park to Sloatsburg via Lake Sebago.json'\nimport mapboxgl from 'mapbox-gl'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nconst image = new Image();\nimage.src = 'data:image/svg+xml;charset=utf-8;base64,' + btoa(svg);\nimage.style = { fill: 'green' }\nconst images = ['userCircle', image, { sdf: true }];\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_MAPBOX\n});\n\nconst trainColors = {\n  'Hudson': '#019E57',\n  'Harlem': '#0260A9',\n  'New Haven': '#EE3E42',\n  'Atlantic City': '#005DAA',\n  'Bergen County': '#B9C9DF',\n  'Gladstone': '#A1D4AE',\n  'Main': '#FECE05',\n  'Meadowlands': '#000000',\n  'Montclair-Boonton': '#E66A5B',\n  'Morristown': '#01A94E',\n  'NEC': '#EE3942',\n  'North Jersey Coast': '#01A4E2',\n  'Pascack Valley': '#A0218C',\n  'Raritan Valley': '#FAA633',\n  'Port Jervis': '#F2793D'\n}\n\nconst lineColors = {\n  'Waterbury Branch': 'black',\n  'Harlem Line': '#0260A9',\n  'Hudson Line': '#019E57',\n  'Danbury Branch': 'black',\n  'New Haven Line': '#EE3E42',\n  'Port Jervis Line': '#F2793D',\n  'New Canaan Branch': 'white',\n  'Pascack Valley Line': '#A0218C',\n  'Atlantic City Line': '#005DAA',\n  'Main Line/Bergen County Line': '#B9C9DF',\n  'Montclair-Boonton Line': '#E66A5B',\n  'Morris and Essex': '#01A94E',\n  'Northeast Corridor': '#EE3942',\n  'North Jersey Coast Line': '#01A4E2',\n  'Pascack Valley Line': '#A0218C',\n  'Raritan Valley Line': '#FAA633',\n}\n\n\n\nconst useBlackText = ['Main Line/Bergen County Line', 'Bergan County', 'Main']\n\n// trails.forEach((trail) => trail.url = {source: })\n\n// const lng = -74.041471\n// const lat = 41.121795\n// const zoom = 9\n\nfunction App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  // const [lng, setLng] = useState(-74.041471);\n  // const [lat, setLat] = useState(41.121795);\n  const [zoom, setZoom] = useState(9);\n  const [trail, setActiveTrail] = useState({})\n  const [station, setActiveStation] = useState({})\n  const [isDesktop] = useMediaQuery(\"(min-width: 48em)\")\n  const [position, setPosition] = useState([-73.993584, 40.750580]); // Penn\n  const [bounds, setBounds] = useState(null)\n\n  const handleClick = (map, event) => {\n    setPosition([event.lngLat.lng, event.lngLat.lat]);\n  };\n\n  const handleZoom = (map, event) => {\n    if (event.fitboundUpdate) {\n      console.log('Map bounds have been programmatically changed')\n    } else {\n      console.log('Map bounds have been changed by user interaction')\n    }\n  }\n\n  let stops = []\n  metroNorth.forEach((line) => {\n    console.log(line.name)\n    line.stops.forEach((stop) => {\n      stop.line = line.name\n      stops.push(stop)\n    })\n  })\n\n  njtransit.forEach((line) => {\n    console.log(line.name)\n    line.stops.forEach((stop) => {\n      stop.line = line.name\n      stops.push(stop)\n    })\n  })\n\n  const { isOpen: infoOpen, onOpen: onInfoOpen, onClose: onInfoClose } = useDisclosure({ defaultIsOpen: false, })\n  const { isOpen: detailsOpen, onOpen: detailsOnOpen, onClose: detailsClose } = useDisclosure()\n\n  const btnRef = useRef()\n\n  useEffect(() => {\n    // map.addSource('routes', {\n    //   type: 'geojson',\n    //   data: route\n    // })\n    // map.setFeatureState()\n  })\n\n  function popupClick(data, map) {\n    setActiveStation({})\n    setActiveTrail(data)\n    detailsOnOpen()\n  };\n\n  function stationClicked(data) {\n    setActiveStation(data)\n    setActiveTrail({})\n    detailsOnOpen()\n  }\n\n  function toggleHover(cursor, { map }) {\n    map.getCanvas().style.cursor = cursor\n    map.setFeatureState(\n      { source: 'routes', id: 0 }, { hover: cursor === 'pointer' ? true : false }\n    )\n  }\n\n  return (\n    <ChakraProvider>\n      <Map\n        style='mapbox://styles/nnethery/ckuk6fatv0rec17pk1r5d5mhr'\n        containerStyle={{\n          height: '100vh',\n          width: '100vw'\n        }}\n        // zoom={[zoom]}\n        center={position}\n        onClick={handleClick}\n        onZoomEnd={handleZoom}\n        fitBounds={bounds}\n        onStyleLoad={(_, event) => onInfoOpen()}\n      >\n        <GeoJSONLayer\n          id='routes'\n          data={route}\n          linePaint={{ 'line-color': 'red', 'line-width': 3, 'line-opacity': ['case', ['boolean', ['feature-state', 'hover'], true], 0, 1] }}\n        />\n        {\n\n          metroNorthLines.features.map((line, index) => {\n            return <GeoJSONLayer\n              id={line.properties.ref + index.toString()}\n              data={line}\n              linePaint={{ 'line-color': trainColors[line.properties.ref], 'line-width': 3, }}\n            />\n          })\n        }\n        {\n\n          njTransitLines.features.map((line, index) => {\n            return <GeoJSONLayer\n              id={line.properties.ref + index.toString()}\n              data={line}\n              linePaint={{ 'line-color': trainColors[line.properties.ref], 'line-width': 3, }}\n            />\n          })\n        }\n        {\n          sharedLines.features.map((line, index) => {\n            return <GeoJSONLayer\n              id={line.properties.ref + index.toString()}\n              data={line}\n              linePaint={{ 'line-color': trainColors[line.properties.ref], 'line-width': 3, }}\n            />\n          })\n        }\n        <Layer type=\"symbol\" id=\"stations\" layout={{ 'icon-image': 'rail', }}>\n          {stops.map((stop) => {\n            return <Feature\n              key={stop.name}\n              coordinates={[stop.lon, stop.lat]}\n              onClick={stationClicked.bind(this, { id: stop.name, name: stop.name, line: stop.line })}\n            />\n          })}\n        </Layer>\n        <Layer type=\"symbol\" id=\"marker\" images={images} layout={{ 'icon-image': 'userCircle', 'icon-size': isDesktop ? 0.2 : 0.1, }}>\n          {trails.map((trail, index) => {\n            return <Feature\n              key={index}\n              coordinates={[trail.lon, trail.lat]}\n              onClick={popupClick.bind(this, { id: index, name: trail.name, park: trail.park, distance: trail.length, url: trail.url })}\n              onMouseEnter={toggleHover.bind(this, 'pointer')}\n              onMouseLeave={toggleHover.bind(this, '')}\n            />\n          })}\n        </Layer>\n      </Map>\n      {!isDesktop ? <Slide direction=\"bottom\" in={detailsOpen} style={{ zIndex: 10 }}>\n        <Box\n          // p=\"10px\"\n          color=\"white\"\n          mt=\"4\"\n          bg={Object.entries(trail).length === 0 ? lineColors[station.line] : \"#213429\"}\n          roundedTop=\"md\"\n          shadow=\"md\"\n        >\n          <Flex>\n            <Spacer />\n            <CloseButton\n              size='lg'\n              onClick={detailsClose}\n              icon={<CloseIcon />}\n              colorScheme='whiteAlpha'\n            />\n          </Flex>\n          <Box\n            pb='40px'\n            px='40px'\n          >\n            <Heading size='md' textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}>\n              {Object.entries(trail).length === 0 ? station.name : trail.name}\n            </Heading>\n            <Text textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}>{Object.entries(trail).length === 0 ? station.line : `${trail.distance} miles`}</Text>\n            {\n              Object.entries(trail).length === 0 ? null :\n                <Text textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}><Link isExternal href={trail.url}>Trail info from NYNJTC <ExternalLinkIcon mx=\"2px\" /></Link></Text>\n            }\n          </Box>\n        </Box>\n      </Slide>\n        : <Slide direction=\"top\" in={detailsOpen} style={{ zIndex: 10 }}>\n          <Flex>\n            <Spacer />\n            <Box\n              width='fit-content'\n              color=\"white\"\n              mt=\"4\"\n              bg={Object.entries(trail).length === 0 ? lineColors[station.line] : \"#213429\"}\n              rounded=\"md\"\n              shadow=\"md\"\n              maxW='container.sm'\n            >\n              <Flex>\n                <Spacer />\n                <CloseButton\n                  size='lg'\n                  onClick={detailsClose}\n                  icon={<CloseIcon />}\n                  colorScheme='whiteAlpha'\n                />\n              </Flex>\n              <Box\n                pb='40px'\n                px='40px'\n              >\n                <Heading size='md' textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}>\n                  {Object.entries(trail).length === 0 ? station.name : trail.name}\n                </Heading>\n                <Text textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}>{Object.entries(trail).length === 0 ? station.line : `${trail.distance} miles`}</Text>\n                {\n                  Object.entries(trail).length === 0 ? null :\n                    <Text textColor={station !== {} && useBlackText.includes(station.line) ? 'black' : 'white'}><Link isExternal href={trail.url}>Trail info from NYNJTC <ExternalLinkIcon mx=\"2px\" /></Link></Text>\n                }\n              </Box>\n            </Box>\n            <Spacer />\n          </Flex>\n        </Slide>\n      }\n\n      <IconButton\n        colorScheme=\"green\"\n        aria-label=\"Info on Daytripper\"\n        size=\"lg\"\n        icon={<QuestionOutlineIcon />}\n        onClick={onInfoOpen}\n        ref={btnRef}\n        isRound\n        position='absolute'\n        top='1rem'\n        right='1rem'\n      />\n      <Drawer\n        isOpen={infoOpen}\n        placement=\"right\"\n        onClose={onInfoClose}\n        autoFocus={false}\n      // size={{ base: 'xs', md: 'md' }}\n      >\n        <DrawerOverlay />\n        <DrawerContent backgroundColor='#213429'>\n          <DrawerCloseButton color='white' size='lg' />\n          <DrawerHeader></DrawerHeader>\n          <DrawerBody>\n            <Flex direction='column' height='100%'>\n              <Heading color='white'>For the day-trippers of NYC</Heading>\n              <br />\n              <Text color='white'>\n                I get it. You live in New York, you like serious hikes, but you don't know how to get there without a car.\n              </Text>\n              <br />\n              <Text color='white'>\n                This site overlays popular hikes that are near train stations to make your planning easier.\n              </Text>\n              <br />\n              <Text color='white'>\n                Remember to always check local conservancies to make sure your trail isn't closed and to kindly <Link href='https://www.nps.gov/articles/leave-no-trace-seven-principles.htm' isExternal colorScheme='telegram'> Leave No Trace &trade;<ExternalLinkIcon mx=\"2px\" /></Link>.\n              </Text>\n              <br />\n              <Spacer />\n              <Text color='white'>\n                Message on <Link href='https://www.twitter.com/nnethery' isExternal colorScheme='telegram'> Twitter <ExternalLinkIcon mx=\"2px\" /></Link> for any issues/suggestions.\n              </Text>\n              <br />\n              <Text color='white'>\n                The mapping engine used on this site costs money. $1 can pay for the usage of 1,000 people. Please consider donating!\n              </Text>\n              <br />\n              {/* <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL, \"enable-funding\": 'venmo' }}>\n                <PayPalButtons style={{ layout: \"horizontal\", label: 'donate', tagline: false, color: 'gold' }}\n                  createOrder={(data, actions) => {\n                    return actions.order.create({\n                      purchase_units: [\n                        {\n                          reference_id:'1',\n                          amount: {\n                            value: \"4.00\",\n                            breakdown: {\n                              item_total: {\n                                currency_code: \"USD\",\n                                value: \"4.00\",\n                              },\n                            },\n                          },\n                          items: [\n                            {\n                              name: \"donation-example\",\n                              quantity: \"1\",\n                              unit_amount: {\n                                currency_code: \"USD\",\n                                value: \"2.00\",\n                              },\n                              category: \"DONATION\",\n                            },\n                            {\n                              name: \"donation-example\",\n                              quantity: \"1\",\n                              unit_amount: {\n                                currency_code: \"USD\",\n                                value: \"2.00\",\n                              },\n                              category: \"DONATION\",\n                            },\n                          ],\n                        },\n                        {\n                          reference_id:'2',\n                          amount: {\n                            value: \"4.00\",\n                            breakdown: {\n                              item_total: {\n                                currency_code: \"USD\",\n                                value: \"4.00\",\n                              },\n                            },\n                          },\n                          items: [\n                            {\n                              name: \"donation-example\",\n                              quantity: \"1\",\n                              unit_amount: {\n                                currency_code: \"USD\",\n                                value: \"2.00\",\n                              },\n                              category: \"DONATION\",\n                            },\n                            {\n                              name: \"donation-example\",\n                              quantity: \"1\",\n                              unit_amount: {\n                                currency_code: \"USD\",\n                                value: \"2.00\",\n                              },\n                              category: \"DONATION\",\n                            },\n                          ],\n                        },\n                      ],\n                    })\n                  }}\n                />\n              </PayPalScriptProvider> */}\n              <Flex justify='center'>\n                <form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_top\">\n                  <input type=\"hidden\" name=\"hosted_button_id\" value=\"MTLTE4H2RCU88\" />\n                  <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" border=\"0\" name=\"submit\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\n                  <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n                </form>\n              </Flex>\n            </Flex>\n          </DrawerBody>\n          <DrawerFooter />\n        </DrawerContent>\n      </Drawer>\n    </ChakraProvider >\n  );\n}\n\nexport default App;\n","export const svg = `<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 301.596 301.596\" style=\"enable-background:new 0 0 301.596 301.596;fill:#060;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M42.594,15c0-8.284-6.716-15-15-15c-8.284,0-15,6.716-15,15v271.596c0,8.284,6.716,15,15,15c8.284,0,15-6.716,15-15\n\t\tV167.878c0.001,0.001,0.003,0.001,0.004,0.002L42.594,15z\"/>\n\t<path d=\"M241.884,82.119c-2.612-3.511-2.582-8.23,0.073-11.421c14.179-16.938,28.766-30.829,42.537-41.913\n\t\tc12.138-9.769-3.688-16.893-7.238-18.387C205.001-20.024,132.811,43.637,60.598,24.255v150.269\n\t\tc72.321,19.395,144.643-44.541,216.963-13.724c3.53,1.495,6.753,1.127,8.306-1.213c1.553-2.331,1.167-6.335-0.995-10.258\n\t\tC270.543,123.431,256.213,101.49,241.884,82.119z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n`","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { extendTheme, ColorModeScript } from '@chakra-ui/react'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}